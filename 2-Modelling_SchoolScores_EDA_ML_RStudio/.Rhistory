# Add code here to load all the required libraries with `library()`.
# Do not include any `install.package()` for any required packages in this rmd file.
library(Hmisc)
library(ggplot2)
# Only change the value for SID
# Assign your student id into the variable SID, for example:
SID <- 2433795                 # This is an example, replace 2101234 with your actual ID
SIDoffset <- (SID %% 50) + 1    # Your SID mod 50 + 1
load("student_data.Rda")
# Now subset the student data set
# Pick every 50th observation starting from your offset
# Put into your data frame named mydf (you can rename it)
mydf <- student_data_analysis[seq(from=SIDoffset,to=nrow(student_data_analysis),by=50),]
mydf
mydf
summary(mydf)
table(mydf$free_school_meals)
table(mydf$completed.extended.project)
table(mydf$month_of_birth)
table(mydf$commute_method)
# install.package("validate")
library(validate)
mydf.rules <- validator(okEntryMark = entry_exam_mark >= 0 & entry_exam_mark <= 100,
okSAT = sat_score >= 0 & sat_score <= 1600,
okPercAbs = percentage_absence >= 0 & percentage_absence <= 100,
okFreeMeals = is.element(free_school_meals,c("Yes","No")),
okGPA = grade_point_average >= 0,
okExProj = is.element(completed.extended.project,c("Yes","No")),
okCommute = is.element(commute_method,c("Bicycle", "Bus", "Car", "Walking", "Other")))
# Getting the summary of the quality check
qual.check <- confront(mydf,mydf.rules)
summary(qual.check)
# Plot the result of the rules we set using validate package
plot(qual.check, xlab = "")
# Check for duplicate rows in mydf
duplicate_rows <- mydf[duplicated(mydf), ]
duplicate_rows
# Check duplicate values in unique valued column
duplicate_ids <- mydf$student_id[duplicated(mydf$student_id)]
duplicate_ids
# Check for missing values in each column of mydf
missing_values <- colSums(is.na(mydf))
missing_values
str(mydf)
# Boxplot for 'entry_exam_mark'
boxplot(mydf$entry_exam_mark, main = "Entry Exam Mark", ylab = "Marks")
# Boxplot for 'sat_score'
boxplot(mydf$sat_score, main = "SAT Score", ylab = "Score")
# Boxplot for 'percentage_absence'
boxplot(mydf$percentage_absence, main = "Percentage Absence", ylab = "Percentage")
# Boxplot for 'grade_point_average'
boxplot(mydf$grade_point_average, main = "Grade Point Average", ylab = "GPA")
negative_marks <- mydf[mydf$entry_exam_mark < 0, ]
negative_marks
# Create a new df (cleaned)
mydf_clean <- mydf
# Replace negative values in 'entry_exam_mark' with the median of the column (just values >= 0)
mydf_clean$entry_exam_mark[mydf_clean$entry_exam_mark < 0] <- median(mydf_clean$entry_exam_mark[mydf_clean$entry_exam_mark >= 0])
percentage_max <- mydf[mydf$percentage_absence > 100, ]
percentage_max
# Replace high values in 'entry_exam_mark' with the median of the column (just values <= 100)
mydf_clean$percentage_absence[mydf_clean$percentage_absence > 100] <- median(mydf_clean$percentage_absence[mydf_clean$percentage_absence <= 100])
table(mydf$commute_method)
# Editing misspelling strings
mydf_clean$commute_method[mydf_clean$commute_method == "Bicicle"] <- "Bicycle"
mydf_clean$commute_method[mydf_clean$commute_method == "car"] <- "Car"
# Changing the column data type to factor
mydf_clean$commute_method <- as.factor(mydf_clean$commute_method)
table(mydf_clean$commute_method)
# Changing the column data type to factor - column month_of_birth
mydf_clean$month_of_birth <- as.factor(mydf_clean$month_of_birth)
# Changing the column data type to factor - column completed.extended.project
mydf_clean$completed.extended.project <- as.factor(mydf_clean$completed.extended.project)
# Changing the column data type to factor - free_school_meals
mydf_clean$free_school_meals <- as.factor(mydf_clean$free_school_meals)
summary(mydf_clean)
str(mydf_clean)
table(mydf_clean$commute_method)
summary(mydf_clean)
# Histogram for 'entry_exam_mark'
hist(mydf_clean$entry_exam_mark, main = "Distribution of Entry Exam Mark",
xlab = "Marks", col = "lightblue", border = "black", breaks = 10)
# Histogram for 'sat_score'
hist(mydf_clean$sat_score, main = "Distribution of SAT Score",
xlab = "Score", col = "lightgreen", border = "black", breaks = 10)
# Histogram for 'grade_point_average'
hist(mydf_clean$grade_point_average, main = "Distribution of GPA",
xlab = "GPA", col = "lightcoral", border = "black", breaks = 20)
selected_columns <- mydf_clean[, c("entry_exam_mark", "sat_score", "percentage_absence", "grade_point_average")]
correlation_matrix <- cor(selected_columns)
correlation_matrix
str(mydf_clean)
# Create the boxplot
boxplot(grade_point_average ~ completed.extended.project,
data = mydf_clean,
main = "Boxplot of GPA by Extended Project Completion",
xlab = "Completed Extended Project",
ylab = "GPA",
col = c("lightblue", "lightgreen"))
t_test_result <- t.test(grade_point_average ~ completed.extended.project, data = mydf_clean)
t_test_result
# Ploting the scatter plot between the features
plot(mydf_clean$grade_point_average, mydf_clean$sat_score,
main = "Correlation: GPA x SAT Score",
xlab = "GPA",
ylab = "SAT Score",
pch = 20, col = "brown")
cor.test(mydf$grade_point_average, mydf$sat_score)
# Ploting the scatter plot between the features
plot(mydf_clean$entry_exam_mark, mydf_clean$grade_point_average,
main = "Correlation: Entry Exam Mark x GPA",
xlab = "Entry Exam Mark",
ylab = "GPA",
pch = 20, col = "red")
cor.test(mydf$entry_exam_mark, mydf$grade_point_average)
# Create the boxplot
boxplot(grade_point_average ~ free_school_meals,
data = mydf_clean,
main = "Boxplot of GPA by Extended Project Completion",
xlab = "Free School Meals",
ylab = "GPA",
col = c("lightblue", "lightyellow"))
t_test_result <- t.test(grade_point_average ~ free_school_meals, data = mydf_clean)
t_test_result
table(mydf_clean$commute_method)
# Create the boxplot
boxplot(grade_point_average ~ commute_method,
data = mydf_clean,
main = "Boxplot of GPA by Commute Methods",
xlab = "Commute Methods",
ylab = "GPA",
col = c("lightgreen", "lightyellow", "lightyellow", "grey", "lightgreen"))
# Ploting the scatter plot between the features
plot(mydf_clean$percentage_absence, mydf_clean$grade_point_average,
main = "Correlation: Absence (%) x GPA",
xlab = "Absence (%)",
ylab = "GPA",
pch = 20, col = "blue")
cor.test(mydf$percentage_absence, mydf$grade_point_average)
# Create the boxplot
boxplot(grade_point_average ~ month_of_birth,
data = mydf_clean,
main = "Boxplot of GPA by Month of Birth",
xlab = "Month of Birth",
ylab = "GPA",
col = c("lightgreen"))
# Ploting the scatter plot between the features
plot(mydf_clean$entry_exam_mark, mydf_clean$grade_point_average,
main = "EEM x GPA",
xlab = "EEM",
ylab = "GPA",
pch = 20, col = "red")
# Ploting the scatter plot between the features
plot(mydf_clean$sat_score, mydf_clean$grade_point_average,
main = "SAT x GPA",
xlab = "SAT",
ylab = "GPA",
pch = 20, col = "red")
# Ploting the scatter plot between the features
plot(mydf_clean$percentage_absence, mydf_clean$grade_point_average,
main = "SAT x GPA",
xlab = "SAT",
ylab = "GPA",
pch = 20, col = "red")
# Ploting the scatter plot between the features
plot(mydf_clean$percentage_absence^(1/2), mydf_clean$grade_point_average,
main = "SAT x GPA",
xlab = "SAT",
ylab = "GPA",
pch = 20, col = "red")
ggplot(mydf_clean, aes(x=completed.extended.project, y=grade_point_average)) + geom_boxplot() + ggtitle("Boxplot of GPA vs Completed Extended Project") + theme_classic()
ggplot(mydf_clean, aes(x=completed.extended.project, y=sat_score)) + geom_boxplot() + ggtitle("Boxplot of SAT Score vs Completed Extended Project") + theme_classic()
ggplot(mydf_clean, aes(x=completed.extended.project, y=entry_exam_mark)) + geom_boxplot() + ggtitle("Boxplot of Entry Exam Mark vs Completed Extended Project") + theme_classic()
mosaicplot(mydf_clean$commute_method~mydf_clean$completed.extended.project, main = "Mosaic Plot of Completition of Extended Project by Commute Method", ylab="Commute Method", xlab="Completed Extended Project")
mosaicplot(mydf_clean$free_school_meals~mydf_clean$completed.extended.project, main = "Mosaic Plot of Completition of Extended Project by Free School Meals", ylab="Free School Meals", xlab="Completed Extended Project")
ggplot(mydf_clean, aes(x=completed.extended.project, y=percentage_absence)) + geom_boxplot() + ggtitle("Boxplot of Percentage Absence vs Completed Extended Project") + theme_classic()
mosaicplot(mydf_clean$month_of_birth~mydf_clean$completed.extended.project, main = "Mosaic Plot of Completition of Extended Project by Month of Birth", ylab="Month of Birth", xlab="Completed Extended Project")
# Fit the linear regression model
m1.int <- lm(grade_point_average ~ sat_score*percentage_absence*completed.extended.project, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m1.int)
plot(m1.int)
# Fit the linear regression model
m1 <- lm(grade_point_average ~ entry_exam_mark + sat_score + percentage_absence + free_school_meals + completed.extended.project, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m1)
plot(m1)
# Fit the linear regression model
m2 <- lm(grade_point_average ~ sat_score + percentage_absence + free_school_meals + completed.extended.project, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m2)
plot(m2)
# Fit the linear regression model
m3 <- lm(grade_point_average ~ sat_score + percentage_absence + completed.extended.project, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m3)
plot(m3)
# Fit the linear regression model
m4 <- lm(grade_point_average ~ sat_score + percentage_absence, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m4)
plot(m4)
# Fit the linear regression model
m5 <- lm(grade_point_average ~ sat_score, data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m5)
plot(m5)
# Fit the linear regression model
m6 <- lm(grade_point_average ~ sat_score + completed.extended.project + I(percentage_absence^(1/2)), data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m6)
plot(m6)
# Fit the linear regression model
m6.2 <- lm(grade_point_average ~ entry_exam_mark + sat_score + free_school_meals + completed.extended.project + I(percentage_absence^(1/2)), data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m6.2)
plot(m6.2)
# Fit the linear regression model
m6.3 <- lm(grade_point_average ~ sat_score + completed.extended.project + I(percentage_absence^(1/2)), data = mydf_clean)
# Summary of the model to evaluate its performance
summary(m6.3)
plot(m6.3)
step(m1)
m6.3
lr1<-glm(mydf_clean$completed.extended.project ~ mydf_clean$entry_exam_mark + mydf_clean$sat_score + mydf_clean$percentage_absence + mydf_clean$free_school_meals + mydf_clean$grade_point_average + mydf_clean$commute_method, family = "binomial")
summary(lr1)
lr2<-glm(mydf_clean$completed.extended.project ~ mydf_clean$sat_score + mydf_clean$percentage_absence + mydf_clean$grade_point_average + mydf_clean$commute_method, family = "binomial")
summary(lr2)
lr3<-glm(mydf_clean$completed.extended.project ~ mydf_clean$percentage_absence*mydf_clean$grade_point_average*mydf_clean$commute_method, family = "binomial")
summary(lr3)
step(lr3)
lr4 <- glm(mydf_clean$completed.extended.project ~ mydf_clean$grade_point_average + mydf_clean$commute_method, family = "binomial")
summary(lr4)
#exponentiate the coefficients
exp(coef(lr4))
